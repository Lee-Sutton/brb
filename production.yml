version: '3'

volumes:
  production_postgres_data: {}
  production_postgres_data_backups: {}
  production_nginx: {}

services:
  django: &django
    image: lmsutton/brb_swarm_django:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    depends_on:
      - postgres
      - redis
    env_file:
      - ./.envs/.production/.django
      - ./.envs/.production/.postgres
    command: /start
    networks:
      - app

  postgres:
    image: lmsutton/brb_swarm_db:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == manager]
    volumes:
      - production_postgres_data:/var/lib/postgresql/data
      - production_postgres_data_backups:/backups
    env_file:
      - ./.envs/.production/.postgres
    networks:
    - app

  nginx:
    image: lmsutton/brb_swarm_nginx:latest
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      placement:
        constraints: [node.role == worker]
    depends_on:
      - django
    volumes:
      - production_nginx:/root/.nginx
      - production_nginx:/etc/letsencrypt
      - production_nginx:/var/www/certbot
    ports:
      - "0.0.0.0:80:80"
      - "0.0.0.0:443:443"
    networks:
      - app
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  certbot:
    image: certbot/certbot
    volumes:
    - production_nginx:/etc/letsencrypt
    - production_nginx:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  redis:
    image: redis:3.2
    networks:
      - app

  celeryworker:
    <<: *django
    command: /start-celeryworker

  celerybeat:
    <<: *django
    command: /start-celerybeat

  flower:
    <<: *django
    ports:
      - "5555:5555"
    command: /start-flower

  visualizer:
    image: dockersamples/visualizer:latest
    ports:
    - 8080:8080
    volumes:
    - "/var/run/docker.sock:/var/run/docker.sock"
    deploy:
      placement:
        constraints: [node.role == manager]
    networks:
    - app

networks:
  app:
    driver: overlay
